# Django settings for sabot project.

try:
	import prod
	LOCAL = False
except ImportError:
	LOCAL = True

DEBUG = LOCAL
TEMPLATE_DEBUG = False

ADMINS = (
	('The Admin', 'admin@yourconference.org'),
)

SITE_ID = 1

#MANAGERS = ADMINS

if LOCAL:
	from localSettings import *
else:
	from prodSettings import *

from conferenceSettings import *

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# In a Windows environment this must be set to your system time zone.
TIME_ZONE = 'Europe/Berlin'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-gb'


# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# If you set this to False, Django will not format dates, numbers and
# calendars according to the current locale.
USE_L10N = True

# If you set this to False, Django will not use timezone-aware datetimes.
USE_TZ = True


DATE_INPUT_FORMATS = ['%d.%m.%Y', '%d.%m.%y']

# Absolute filesystem path to the directory that will hold user-uploaded files.
# Example: "/home/media/media.lawrence.com/media/"

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash.
# Examples: "http://media.lawrence.com/media/", "http://example.com/media/"
MEDIA_URL = '/media/'

LOGIN_REDIRECT_URL = "/"
LOGIN_URL = "/accounts/login/"

# URL prefix for static files.
# Example: "http://media.lawrence.com/static/"
STATIC_URL = '/static/'


# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
	'django.contrib.staticfiles.finders.FileSystemFinder',
	'django.contrib.staticfiles.finders.AppDirectoriesFinder',
#	'django.contrib.staticfiles.finders.DefaultStorageFinder',
)

# Make this unique, and don't share it with anybody.
SECRET_KEY = 'FILL_IN_HERE'

TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': [
			PROJECT_ROOT + '/templates',
		],
		'APP_DIRS': False,
		'OPTIONS': {
			'context_processors': [
				'django.contrib.auth.context_processors.auth',
				'django.template.context_processors.debug',
				'django.template.context_processors.i18n',
				'django.template.context_processors.media',
				'django.template.context_processors.static',
				'django.template.context_processors.tz',
				'django.contrib.messages.context_processors.messages',
				'sabot.template_processors.dates_processor',
				'sabot.template_processors.settings_processor',

			],
			'loaders' : [
				'django.template.loaders.filesystem.Loader',
				'django.template.loaders.app_directories.Loader',
				'django.template.loaders.eggs.Loader',
				'sponsor.dbtemplateloader.DBLoader',
			]
		}
	}
]

MIDDLEWARE = [
	'django.middleware.security.SecurityMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'django.middleware.common.CommonMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'sabot.urls'

# Python dotted path to the WSGI application used by Django's runserver.
WSGI_APPLICATION = 'sabot.wsgi.application'

INSTALLED_APPS = (
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.sites',
	'django.contrib.messages',
	'django.contrib.staticfiles',
	'registration',
	'crispy_forms',
	'captcha',
	'account',
	'main',
	'sponsor',
	'exhibitor',
	'devroom',
	'invoice',
	'parcel',
	# Uncomment the next line to enable the admin:
	# 'django.contrib.admin',
	# Uncomment the next line to enable admin documentation:
	# 'django.contrib.admindocs',
)

# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
	'version': 1,
	'disable_existing_loggers': False,
	'filters': {
		'require_debug_false': {
			'()': 'django.utils.log.RequireDebugFalse'
		}
	},
	'handlers': {
		'mail_admins': {
			'level': 'ERROR',
			'filters': ['require_debug_false'],
			'class': 'django.utils.log.AdminEmailHandler'
		},
		'console' : {
			'level': 'DEBUG',
			'class': 'logging.StreamHandler',
		},
		'file': {
			'level': 'DEBUG',
			'class': 'logging.FileHandler',
			'filename': GLOBAL_LOG_FILE,
		},
	},
	'loggers': {
		'django.request': {
			'handlers': ['mail_admins', 'file'],
			'level': 'ERROR',
			'propagate': True,
		},
#		'django.db.backends' : {
#			'handlers' : ['file'],
#			'level' :  'DEBUG',
#		},
	}
}




# Custom parameters:
ACCOUNT_ACTIVATION_DAYS = 365

CRISPY_TEMPLATE_PACK = "bootstrap3"
